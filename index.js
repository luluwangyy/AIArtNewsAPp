const express = require('express');
const { createServer } = require('http');
const { join } = require('path');
const { Server } = require('socket.io');
const { exec } = require('child_process');
const bodyParser = require('body-parser');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const axios = require('axios');

require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5500;

const server = createServer(app);
const io = new Server(server);

app.use(express.static('public'));
app.use(bodyParser.json());
app.use(session({ secret: 'secret', resave: false, saveUninitialized: false }));
app.use(passport.initialize());
app.use(passport.session());

const users = [
  { id: 1, username: 'user1', password: 'pass1' },
  { id: 2, username: 'user2', password: 'pass2' }
];

passport.use(new LocalStrategy(
  (username, password, done) => {
    const user = users.find(u => u.username === username && u.password === password);
    if (user) {
      return done(null, user);
    } else {
      return done(null, false, { message: 'Incorrect credentials.' });
    }
  }
));

passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  const user = users.find(u => u.id === id);
  done(null, user);
});

app.post('/login', passport.authenticate('local'), (req, res) => {
  res.send('Logged in');
  console.log("logged in");
});

let prompts = [];
let imageUrls = [];

io.on('connection', (socket) => {
  console.log('A user connected');

  socket.on('submit title', (data) => {
    const command = `python3 generate_title.py "${data}"`;
    exec(command, (error, stdout, stderr) => {
      if (error || stderr) {
        console.error('Error executing Python script:', error, stderr);
        io.emit('error', 'Failed to generate title');
        return;
      }
      io.emit('new title', stdout.trim());
      console.log("Title generated by AI:", stdout.trim());
    });
  });

  socket.on('submit bio', (data) => {
    const { name, bio } = data;
    const command = `python3 generate_bio.py "${name}" "${bio}"`;
    exec(command, (error, stdout, stderr) => {
      if (error || stderr) {
        console.error('Error executing Python script:', error, stderr);
        io.emit('error', 'Failed to generate bio');
        return;
      }
      io.emit('new bio', stdout.trim());
      console.log("Bio:", stdout.trim());
    });
  });

  socket.on('submit header', (data) => {
    io.emit('new header', data);
  });

  socket.on('submit chat', (data) => {
    io.emit('new chat', data);
  });

  socket.on('submit label', (data) => {
    exec(`python3 generate_label.py "${data}"`, (error, stdout, stderr) => {
      if (error || stderr) {
        console.error('Error executing Python script:', error, stderr);
        io.emit('error', 'Failed to generate label');
        return;
      }
      io.emit('new label', stdout.trim());
      console.log("Label:", stdout.trim());
    });
  });

  socket.on('submit concept', (prompt) => {
    prompts.push(prompt);
    io.emit('submit concept', prompt);

    const { theme, imagery } = prompt;
    const command_idea = `python3 generate_conceptualart.py "${theme}" "${imagery}"`;
    const command_idea2 = `python3 generate_conceptualart2.py "${theme}" "${imagery}"`;

    exec(command_idea, (error, stdout, stderr) => {
      if (error || stderr) {
        console.error('Error executing Python script:', error, stderr);
        io.emit('error', 'Failed to generate image');
        return;
      }
      try {
        const outputParts = stdout.split('\n');
        const url = outputParts[0];
        const titleLine = outputParts.find(line => line.startsWith('Title:'));
        const title = titleLine ? titleLine.split('Title:')[1].trim().replace(/^"|"$/g, '') : 'No title provided';
        io.emit("new label and article title", title);
        const descriptionStartIndex = outputParts.findIndex(line => line.startsWith('Description:')) + 1;
        const description = outputParts.slice(descriptionStartIndex).join('\n').trim();

        console.log("Description:", description);
        io.emit('new description', description);

        const matches = url.match(/https:\/\/[^"]+/);
        if (matches && matches[0]) {
          imageUrls.push(matches[0]);
          io.emit('new image', matches[0]);
        } else {
          io.emit('error', 'No image URL found');
          console.error('No URL found in Python script output:', stdout);
        }
      } catch (err) {
        console.error('Error processing output:', err);
        io.emit('error', 'Error processing image data');
      }
    });

    exec(command_idea2, (error, stdout, stderr) => {
      if (error || stderr) {
        console.error('Error executing Python script:', error, stderr);
        callback('Failed to generate image');
        return;
      }
      try {
        const outputParts2 = stdout.split('\n');
        const url2 = outputParts2[0];

        const titleLine2 = outputParts2.find(line => line.startsWith('Title:'));
        const title2 = titleLine2 ? titleLine2.split('Title:')[1].trim().replace(/^"|"$/g, '') : 'No title provided';

        const descriptionStartIndex2 = outputParts2.findIndex(line => line.startsWith('Description:')) + 1;
        const description2 = outputParts2.slice(descriptionStartIndex2).join('\n').trim();

        console.log("Title2:", title2);

        const matches2 = url2.match(/https:\/\/[^"]+/);
        if (matches2 && matches2[0]) {
          io.emit('new image 2', matches2[0]);
        } else {
          console.error('No URL found in Python script output:', stdout);
          io.emit('error', 'No image URL found');
        }
      } catch (err) {
        console.error('Error processing output:', err);
        io.emit('error', 'Error processing image data');
      }
    });
  });

  socket.on('merge_image', () => {
    console.log('Received merge image event');

    if (imageUrls.length < 2) {
      io.emit('error', 'Not enough image URLs for merging');
      return;
    }

    exec(`python3 generate_blend_image.py "${imageUrls[0]}" "${imageUrls[1]}"`, (error, stdout, stderr) => {
      if (error || stderr) {
        console.error('Error executing Python script:', error, stderr);
        io.emit('error', 'Failed to generate merged image');
        return;
      }
      try {
        const matches = stdout.match(/https:\/\/[^"]+/);
        if (matches && matches[0]) {
          io.emit('new image middle', matches[0]);
        } else {
          io.emit('error', 'No image URL found');
          console.error('No URL found in Python script output:', stdout);
        }
      } catch (err) {
        console.error('Error processing output:', err);
        io.emit('error', 'Error processing merged image data');
      }
    });
  });
});

app.get('/', (req, res) => {
  res.sendFile(join(__dirname, 'public/home.html'));
});

server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
